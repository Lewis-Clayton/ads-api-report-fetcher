main:
  params: [args]
  steps:
    - init:
        assign:
          - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - location: ${default(map.get(args, "location"), "us-central1")}
          - scripts: ${args.scripts}
          - accounts: ${args.accounts}
          - cloud_function: ${default(map.get(args, "cloud_function"), "gaarf")}
          - ads_config_path: ${args.ads_config_path}
          - bq_dataset: ${args.bq_dataset}
          - bq_dataset_location: ${map.get(args, "bq_dataset_location")}
          - macros: ${map.get(args, "macros")}
          - bq_writer_options: ${map.get(args, "bq_writer_options")}
          - concurrency_limit: ${default(map.get(args, "concurrency_limit"), 20)}
          - disable_strict_views: ${default(map.get(args,"disable_strict_views"), false)}

    # get CF 'gaarf' function's URL
    - get_function:
        call: http.get
        args:
          url: ${"https://cloudfunctions.googleapis.com/v2/projects/" + project + "/locations/" + location + "/functions/" + cloud_function}
          auth:
            type: OAuth2
        result: function
        # TODO: move to using CF adapter when it's ready (currently only v1 supported):
        #call: googleapis.cloudfunctions.v2.projects.locations.functions.get
        #args:
        #  name: ${"projects/" + project + "/locations/" + location + "/functions/" + cloud_function}
        #result: function
    # get CF 'gaarf-bq-view' function's URL
    - get_function_view:
        call: http.get
        args:
          url: ${"https://cloudfunctions.googleapis.com/v2/projects/" + project + "/locations/" + location + "/functions/" + cloud_function + "-bq-view"}
          auth:
            type: OAuth2
        result: function_view
    - initialize_functions_uris:
        assign:
          - gaarf_main_cf_uri: ${function.body.serviceConfig.uri}
          - gaarf_bqview_cf_uri: ${function_view.body.serviceConfig.uri}

    - iterate_over_scripts:
        parallel:
          shared: [scripts, accounts]
          concurrency_limit: ${concurrency_limit}
          for:
            value: script_item
            in: ${scripts}
            steps:
              - check_for_constant:
                  switch:
                    - condition: ${text.match_regex(script_item, "_constant")}
                      next: execute_constant_script
                  next: parallel_loop_over_accounts
              # execute constant query for a single (first) account
              - execute_constant_script:
                  call: executeAdsQuery
                  args:
                    cf_uri: ${gaarf_main_cf_uri}
                    script_path: ${script_item}
                    account: ${accounts[0]}
                    macros: ${macros}
                    project: ${project}
                    bq_dataset: ${bq_dataset}
                    bq_dataset_location: ${bq_dataset_location}
                    ads_config_path: ${ads_config_path}
                    bq_writer_options: ${bq_writer_options}
                    is_constant: true
                  next: continue # continue loop over queries
              # parallel nested loop over accounts
              - parallel_loop_over_accounts:
                  parallel:
                    shared: [accounts]
                    concurrency_limit: ${concurrency_limit}
                    for:
                      value: account
                      in: ${accounts}
                      steps:
                        - execute_script:
                            call: executeAdsQuery
                            args:
                              cf_uri: ${gaarf_main_cf_uri}
                              script_path: ${script_item}
                              account: ${account}
                              macros: ${macros}
                              project: ${project}
                              bq_dataset: ${bq_dataset}
                              bq_dataset_location: ${bq_dataset_location}
                              ads_config_path: ${ads_config_path}
                              bq_writer_options: ${bq_writer_options}
              # create a view in BQ to combine all account tables into a single view
              - call_create_view_cf:
                  call: http.post
                  args:
                    url: ${gaarf_bqview_cf_uri}
                    timeout: 1800
                    query:
                      project_id: ${project}
                      dataset: ${bq_dataset}
                      dataset_location: ${bq_dataset_location}
                      script_path: ${script_item}
                    body:
                      accounts: ${if(disable_strict_views, [], accounts)}
                    auth:
                      type: OIDC
                  result: create_view_response

executeAdsQuery:
  params: [cf_uri, script_path, account, macros, project, bq_dataset, bq_dataset_location, ads_config_path, bq_writer_options, is_constant: false]
  steps:
    - init_vars:
        assign:
          - started: ${sys.now()}
    - call_gaarf_cf:
        try:
          call: http.post
          args:
            url: ${cf_uri}
            timeout: 1800 # maximum allowed timeout in Workflows is 1800 (30min) despite the fact CF gen2 support 3600 (60min)
            query:
              script_path: ${script_path}
              ads_config_path: ${ads_config_path}
              bq_project_id: ${project}
              bq_dataset: ${bq_dataset}
              bq_dataset_location: ${bq_dataset_location}
              customer_id: ${account}
              single_customer: true # it's important to prevent fetching child accounts for the supplied cid
            body:
              macro: ${macros}
              bq_writer_options: ${bq_writer_options}
            auth:
              type: OIDC
          result: script_results
        retry:
          predicate: ${custom_retry_predicate}
          max_retries: 3
          backoff:
            initial_delay: 2
            max_delay: 60
            multiplier: 2
    - log_script_result:
        call: sys.log
        args:
          data:
            is_constant: ${is_constant}
            query: ${script_path}
            account: ${account}
            rowCount: ${map.get(script_results.body, "" + account)}
            started: ${time.format(started)}
            elapsed: ${sys.now() - started}
          severity: "INFO"

custom_retry_predicate:
  params: [e]
  steps:
    - log_call_gaarf_cf_failure:
        call: sys.log
        args:
          data: ${e}
          severity: "WARNING"
    - normalize_fields:
        assign:
          - tags: ${default(map.get(e, "tags"), [])}
          - code: ${default(map.get(e, "code"),0)}
    - what_to_repeat:
        switch:
          # We'll repeat if it's a ConnectionError, TimeoutError or http statuses:
          #   429 - Too Many Requests
          #   502 - Bad Gateway
          #   503 - Service Unavailable
          #   504 - Gateway Timeout
          # NOTE: sometime errors happen inside Workflow and there's no any code
          # (i.e. "code" can be null, so DO NOT use operand ==,<,>,>=,<= without wrapping with `default`
          - condition: ${"ConnectionFailedError" in tags or "ConnectionError" in tags or "TimeoutError" in tags or code == 429 or code == 502 or code == 503 or code == 504}
            return: true
    - otherwise:
        return: false
